<idea-plugin url="https://github.com/dmarks2/liferay-plugin-intellij">
    <id>de.dm.intellij.liferay</id>
    <name>Liferay</name>
    <category>Framework integration</category>
    <version>0.0.21</version>

    <vendor email="Dominik.Marks@gmx.de" url="https://github.com/dmarks2">Dominik Marks</vendor>

    <idea-version since-build="241" />

    <description><![CDATA[
        <p>This plugin adds some features for developing Liferay modules. The following topics have been improved so far</p>
        <ul>
            <li>Creating new Modules</li>
            <li>Editing Liferay XML files</li>
            <li>Editing JavaScript files</li>
            <li>Editing Velocity and Freemarker files in Layout Templates and Themes</li>
            <li>Editing Journal Templates and Application Display Templates</li>
            <li>Editing CSS / SCSS files</li>
            <li>Editing JSP files</li>
            <li>Editing OSGi components</li>
            <li>Editing service.xml</li>
        </ul>
        <p>Detailed documentation can be found at the <a href="https://github.com/dmarks2/liferay-plugin-intellij/blob/master/readme.md">GitHub Repository</a></p>
      ]]></description>

    <change-notes><![CDATA[
        <p>Version 0.0.21</p>
        <ul>
            <li>Feature: add deprecation checks for Liferay 2024.Q1</li>
            <li>Feature: add quick fix for non-matching plugin or dependency versions in pom.xml (portal-web, service-builder, rest-builder)</li>
        </ul>

        <p>Version 0.0.20</p>
        <ul>
            <li>Change: Update support for IntelliJ 2024.1, dropped support for earlier versions</li>
            <li>Bugfix: Fixed ArrayIndexOutOfBoundsException when processing properties without a value</li>
        </ul>

        <p>Version 0.0.19</p>
        <ul>
            <li>Feature: add deprecation checks for Liferay 2023.Q4</li>
            <li>Feature: update webdriver version to support Chrome 114+ when running Poshi tests</li>
            <li>Bugfix: File references were not working in XML files for Liferay 7.4</li>
            <li>Bugfix: NullPointerException when trying to validate plugin versions in a pom.xml which did not contain a plugins section</li>
        </ul>

        <p>Version 0.0.18</p>
        <ul>
            <li>Feature: add freemarker taglib deprecation inspections</li>
            <li>Feature: add java, jsp, groovy code deprecation inspections</li>
            <li>Feature: add property file deprecation inspections (portal-ext.properties, system-ext.properties, liferay-plugin-package.properties)</li>
            <li>Feature: add changes from LPS-112464 (className changed to cssClass in Clay taglibs)</li>
            <li>Feature: add in-depth validations of Poshi Scripts (using external Poshi Validation)</li>
            <li>Feature: check if service-builder and rest-builder maven plugins match the used liferay version</li>
            <li>Feature: check if portal-web dependency matches the used liferay version</li>
            <li>Bugfix: fix encoding when executing Poshi Scripts (UTF-8 instead of system dependant encoding)</li>
            <li>Bugfix: Missing implicit variables workflowContext, roles and user in scripted-assignment tag for workflow definitions</li>
            <li>Change: Update support for IntelliJ 2023.3, dropped support for older versions</li>
        </ul>

        <p>Version 0.0.17</p>
        <ul>
            <li>Feature: Code completion features for client-extensions.yaml</li>
            <li>Feature: Code completion features for rest-config.yaml</li>
            <li>Feature: Code completion and references for JSP taglibs referring to javascript modules (e.g. react:component)</li>
            <li>Feature: Add support for date-time in data-lfr-editable-type (see LPS-154775)</li>
            <li>Feature: Add date_time field type for web content structures (see LPS-178624)</li>
            <li>Feature: show deprecation warnings for deprecated or removed taglibs or attributes in JSP files</li>
            <li>Bugfix: Fix "Module already disposed" when unloading a module</li>
            <li>Bugfix: fix support for IntelliJ 2023.2</li>
            <li>Change: Update support for IntelliJ 2023.1, dropped support for older versions</li>
            <li>Change: Update Poshi to 1.0.453</li>
            <li>Change: Remove unsupported languages in workflow scripts (see LPS-187594)</li>
        </ul>

        <p>Version 0.0.16</p>
        <ul>
            <li>Feature: Experimental Poshi support</li>
            <li>Feature: Add Freemarker debugging support in Application Display Templates for the Similar Results portlet</li>
            <li>Bugfix: Execution of Liferay groovy scripts required Java 17 (now Java 11 is enough)</li>
            <li>Bugfix: Freemarker debugging did not work ins some Application Display Templates due to API changes in newer Liferay versions</li>
            <li>Bugfix: Implicit variables for Blog Application Display Templates in newer Liferay versions</li>
        </ul>

        <p>Version 0.0.15</p>
        <ul>
            <li>Feature: Ability to compare theme files with the original files from the parent theme</li>
            <li>Feature: Resolve configurationPid OSGi properties to configuration interface classes</li>
            <li>Feature: Add inspection to check if a Meta Configuration ID matches the full qualified classname of the interface</li>
            <li>Change: Remove inspection about aui:fieldset must be inside an aui:fieldset-group (tag has been removed in Liferay lately)</li>
            <li>Change: Update support for IntelliJ 2022.3, dropped support for older versions</li>
            <li>Change: Disabled gradle importers for bundle-support and theme plugins (no longer working with Java 17)</li>
            <li>Bugfix: Setting Freemarker Breakpoint in Application Display Templates with filenames containing spaces did not work</li>
        </ul>

        <p>Version 0.0.14</p>
        <ul>
            <li>Feature: Resolve Resource Bundles</li>
            <li>Feature: Support for Journal Structures based on Data Engine Definition schema (Liferay 7.4 only)</li>
            <li>Feature: Implicit usage of constructors in OSGi components (e.g. ServiceWrappers)</li>
            <li>Feature: Resolve known Freemarker context variables in Fragment HTML files</li>
            <li>Feature: Add support for Freemarker debugger in Liferay 7.4</li>
            <li>Feature: Ability to use Freemarker debugger for Modules based on direct service calls to Advanced Resources Importer</li>
            <li>Feature: JavaScript support for liferay-look-and-feel.xml</li>
            <li>Feature: Add javax.portlet.version to properties of Portlet components</li>
            <li>Feature: Run groovy scripts directly on a running Liferay server</li>
            <li>Feature: Improve documentation provided for implicit freemarker variables</li>
            <li>Feature: Add references for target names in workflow definition files</li>
            <li>Feature: Add support to debug Freemarker templates imported from web context</li>
            <li>Feature: Added some documentations for bnd.bnd instructions</li>
            <li>Change: Update support for IntelliJ 2022.1</li>
            <li>Bugfix: ClassCastException during code completions in an empty frontend-token-definition.json file</li>
            <li>Bugfix: description tag inside notification of a workflow definition supports Freemarker, too</li>
            <li>Bugfix: unable to attach Freemarker breakpoint if journal structure or template has been renamed</li>
            <li>Bugfix: try to circumvent IntelliJ hang when adding a Freemarker breakpoint</li>
            <li>Bugfix: Do not add inspection of @Reference usage in abstract classes or interfaces</li>
        </ul>

        <p>Version 0.0.13</p>
        <ul>
            <li>Feature: Language injections for script and template tags in Liferay workflow definition files</li>
            <li>Feature: Provide workflow context variables for script and template tags (groovy and freemarker)</li>
            <li>Feature: Resolve Files and Layout entries in Resources Importer Template files</li>
            <li>Feature: Inject SQL language into custom-sql definition files</li>
            <li>Feature: OSGi component properties for Fragment components</li>
            <li>Feature: Add support for custom fragment html tags and attributes</li>
            <li>Feature: Add JSON schemas for several fragment related files</li>
            <li>Feature: Add freemarker support for fragment html files</li>
            <li>Feature: File references in fragment.json file</li>
            <li>Feature: Add support for comments in bnd.bnd files</li>
            <li>Bugfix: Exception when trying to inject Javascript inside aui:script-tags containing additional attributes (like "use" or "require")</li>
            <li>Bugfix: Avoid NullPointerException when trying to lookup documentation for an unknown OSGi property</li>
            <li>Bugfix: Inner classes where not properly resolved inside className attributes in JSP files</li>
            <li>Change: Fixed support for IntelliJ 2021.3</li>
        </ul>
        <p>Version 0.0.12</p>
        <ul>
            <li>Feature: Added support for Liferay 7.4</li>
            <li>Feature: Code Completion and documentation for portal.properties files</li>
            <li>Feature: JSON Schema for frontend-token-definition.json</li>
            <li>Feature: Language.properties references for label attributes in frontend-token-definition.json</li>
            <li>Feature: Clay SCSS Variables documentation</li>
            <li>Feature: Added support for portlet-display-templates.xml (XML Schema and file references)</li>
            <li>Feature: Added support for new journal structure json schema (for Liferay 7.4)</li>
            <li>Bugfix: Fixed detecting the bundles directory from the bundle-support maven plugin</li>
            <li>Change: Fixed support for IntelliJ 2021.2, dropped support for IntelliJ 2021.1 and lower</li>
        </ul>
        <p>Version 0.0.11</p>
        <ul>
            <li>Feature: Implicit usage of some property files and keys ("javax.portlet.title." or "liferay.workspace."), so that they are no longer shown as "unused property"</li>
            <li>Feature: Inspection of @Reference usage outside of a @Component class</li>
            <li>Bugfix: OSGi property code completion for single properties, e.g. without brackets around</li>
            <li>Bugfix: Improved compatibility with IntelliJ 2021.1</li>
            <li>Bugfix: fixed implicit freemarker variables for modified facet portlet</li>
            <li>Change: Dropped support for IntelliJ IDEA 2020.3 or earlier</li>
        </ul>
        <p>Version 0.0.10</p>
        <ul>
            <li>Feature: Additional taglibs available in Freemarker templates for Liferay 7.1, 7.2 and 7.3</li>
            <li>Feature: Updated taglib support (CSS, Language Bundle) for Liferay 7.3</li>
            <li>Feature: Added some basic code completions for some liferay taglib attributes in JSPs and Freemarker</li>
            <li>Feature: Code completion for Java Classes in Freemarker taglibs</li>
            <li>Feature: Support for debugging Resource Importer files imported to specific sites</li>
            <li>Bugfix: Parsing package.json may lead to an exception in the log</li>
            <li>Bugfix: Fixed compatibility with IntelliJ Community Edition</li>
            <li>Bugfix: Fixed injection of Javascript inside Freemarker taglibs using the square bracket notation</li>
            <li>Bugfix: Improved compatibility with IntelliJ 2020.2 and 2020.3</li>
            <li>Bugfix: Fixed errors in IntelliJ log (recursive commit, index deadlock)</li>
        </ul>
        <p>Version 0.0.9</p>
        <ul>
            <li>Feature: Added Liferay taglib support for Liferay 7.1 and 7.2 in Freemarker templates</li>
            <li>Feature: Added additional component properties for Liferay 7.1. and 7.2</li>
            <li>Feature: Live Templates for Application Display Templates and Journal Templates</li>
            <li>Feature: Added generic support for Liferay 7.3</li>
            <li>Feature: Inspection to check inheritance of OSGi component service classes</li>
            <li>Feature: Experimental support for new ADTs for the search components in Liferay 7.3</li>
            <li>Feature: Detect source folder from gulpfile.js to improve code completions in Liferay Theme modules</li>
            <li>Bugfix: Bugfix renaming packages inside bnd.bnd files</li>
            <li>Bugfix: Detecting the Liferay version not working correctly in submodules</li>
            <li>Bugfix: Resolving files relative to the content root directories in XML files using file references</li>
            <li>Bugfix: Fixed Velocity support for Liferay 7.1, 7.2 and 7.3</li>
            <li>Bugfix: Fixed detecting proper Liferay version when .iml file is saved inside .idea folder</li>
            <li>Bugfix: Fixed Freemarker Debugger for Web Content Templates in Liferay 7.3</li>
            <li>Change: Dropped support for IntelliJ IDEA 2019.2 or earlier</li>
            <li>Change: Try to avoid conflicts with the official IntelliJ plugin from Liferay</li>
        </ul>
        <p>Version 0.0.8</p>
        <ul>
            <li>Bugfix: Bugfix detecting a wrong version number in the Bundle-Version instruction inside the bnd.bnd file.</li>
        </ul>
        <p>Version 0.0.7</p>
        <ul>
            <li>Feature: Updated taglib support for Liferay 7.1 and 7.2</li>
            <li>Feature: Inspections for wrongly nested Liferay tags inside JSPs</li>
            <li>Feature: resolve _SERVLET_CONTEXT_ based imports in Freemarker templates from external dependencies, too.</li>
            <li>Feature OSGi Websocket Whiteboard properties</li>
            <li>Bugfix: Performance issues resolving JSPs from Custom JSP Bags</li>
            <li>Bugfix: fixed JSON schema for sitemap.json</li>
        </ul>
        <p>Version 0.0.6</p>
        <ul>
            <li>Feature: File References for portlet.properties files</li>
            <li>Feature: Improved bnd.bnd editor</li>
            <li>Feature: Improved code completions to support Portlet 3.0 Specification</li>
            <li>Feature: Added support for Liferay 7.2</li>
            <li>Bugfix: Fixed parsing of invalid pom.xml</li>
            <li>Bugfix: Fixed non-idempotent computation error message</li>
            <li>Bugfix: Detecting the bundles directory for gradle projects</li>
            <li>Change: Updated compatibility to IntelliJ 2019.2</li>
        </ul>
        <p>Version 0.0.5</p>
        <ul>
            <li>Feature: Experimental Freemarker debugger</li>
            <li>Feature: Additional service.xml inspections (primary key, uuid)</li>
            <li>Feature: resolve _SERVLET_CONTEXT_ based imports in Freemarker templates</li>
            <li>Feature: added preliminary support for Liferay 7.1</li>
            <li>Bugfix: JavaScript Support for aui:validator of type "required"</li>
            <li>Bugfix: Resolve Portlet Names from constant in a class from the same package as the portlet class</li>
            <li>Bugfix: Fixed compatibility with IntelliJ 2019.1.x</li>
            <li>Bugfix: Fixed code completion for implicit Groovy variables</li>
            <li>Bugfix: TemplateNode properties (e.g. .getData()) were not offered for nested structure variables in Freemarker templates</li>
        </ul>
        <p>Version 0.0.4</p>
        <ul>
            <li>Bugfix: Fixed parsing liferay-look-and-feel.xml when creating that file for the first time</li>
            <li>Bugfix: Correctly detect locale strings in JSON schema for journal structure files</li>
            <li>Bugfix: Fixed compatibility with IntelliJ 2018.3 when injecting javascript into freemarker taglibs</li>
            <li>Bugfix: ServiceLocator lookup in Application Display Templates was not working properly</li>
            <li>Feature: Code completion for portlet names in JSP taglibs</li>
            <li>Feature: Code completion for action/render/resource commands in JSP taglibs</li>
            <li>Feature: Support for multiple OSGi service definitions in a @Component annotation</li>
            <li>Feature: Inspections for service.xml</li>
            <li>Feature: Class Name completion for objectUtil in Freemarker templates</li>
            <li>Feature: Quick Documentation lookup for Journal Structure variables in Freemarker templates</li>
            <li>Feature: Experimental support to debug JSPs (in own modules and in dependencies)</li>
        </ul>
        <p>Version 0.0.3</p>
        <ul>
            <li>Feature: Javascript injection for aui:validator and many onXXX attributes</li>
            <li>Feature: File References in several Liferay XML files</li>
            <li>Bugfix: Code completion for OSGi properties did not work when using Java Constants</li>
            <li>Feature: Quick documentation for several OSGi properties</li>
            <li>Feature: Support for core JSP hooks</li>
            <li>Feature: Detect implicit usage for OSGi annotations like (at)Reference etc.</li>
            <li>Feature: Javascript injection into Freemarker templates</li>
            <li>Feature: JavaBean property references in JSP Taglibs</li>
            <li>Feature: JSON Schema for Journal Structures and other resources importer files</li>
            <li>Feature: Support for OSGi fragments for non-Liferay modules</li>
            <li>Feature: Implicit groovy variables</li>
            <li>Feature: Automatically exclude the "bundles" directory</li>
            <li>Feature: Liferay target version support</li>
            <li>Feature: Improved support for getSiblings() in Freemarker templates</li>
            <li>Feature: Added taglib code completion for class names</li>
            <li>Feature: Class Name completion inside serviceLocator.findService(), enumUtil, staticUtil and staticFieldGetter in Freemarker templates</li>
            <li>Feature: Implicit resolve of serviceLocator, enumUtil and staticUtil instructions in Freemarker templates</li>
            <li>Feature: Inspections for JSP files</li>
        </ul>
        <p>Version 0.0.2</p>
        <ul>
            <li>Feature: Added Compass support for Liferay 6.1 and 6.2</li>
            <li>Feature: Added Liferay specific contexts for Live Templates</li>
            <li>Feature: Compare JSPs with original Liferay file (JSP hooks or web fragments)</li>
        </ul>
        <p>Version 0.0.1</p>
        <ul>
            <li>Initial Version</li>
        </ul>
    ]]></change-notes>

    <depends>org.jetbrains.idea.maven</depends>
    <depends>com.intellij.gradle</depends>
    <depends>com.intellij.java</depends>
    <depends optional="true" config-file="javascript.xml">JavaScript</depends>
    <depends optional="true" config-file="javaee.xml">com.intellij.javaee</depends>
    <depends optional="true" config-file="jsp.xml">com.intellij.jsp</depends>
    <depends optional="true" config-file="velocity.xml">com.intellij.velocity</depends>
    <depends optional="true" config-file="freemarker.xml">com.intellij.freemarker</depends>
    <depends optional="true" config-file="css.xml">com.intellij.css</depends>
    <depends optional="true" config-file="scss.xml">org.jetbrains.plugins.sass</depends>
    <depends optional="true" config-file="groovy.xml">org.intellij.groovy</depends>
    <depends optional="true" config-file="uml.xml">com.intellij.diagram</depends>
    <depends optional="true" config-file="properties.xml">com.intellij.properties</depends>
    <depends optional="true" config-file="xpath.xml">XPathView</depends>

    <extensions defaultExtensionNs="com.intellij">
        <moduleService serviceImplementation="de.dm.intellij.liferay.module.LiferayModuleComponent" />

        <!-- Define a new filetype for "bnd.bnd" files -->
        <fileType name="bnd" implementationClass="de.dm.intellij.bndtools.BndFileType" fieldName="INSTANCE" language="bnd" extensions="bnd"/>
        <lang.parserDefinition language="bnd" implementationClass="de.dm.intellij.bndtools.parser.BndParserDefinition"/>
        <lang.syntaxHighlighterFactory language="bnd" implementationClass="de.dm.intellij.bndtools.highlighting.BndSyntaxHighlighterFactory"/>
        <lang.commenter language="bnd" implementationClass="de.dm.intellij.bndtools.commenter.BndCommenter" />
        <annotator language="bnd" implementationClass="de.dm.intellij.bndtools.BndHighlightingAnnotator"/>
        <completion.contributor language="bnd" implementationClass="de.dm.intellij.bndtools.completion.BndCompletionContributor"/>
        <lang.documentationProvider language="bnd" implementationClass="de.dm.intellij.bndtools.documentation.BndDocumentationProvider"/>

        <enterHandlerDelegate implementation="de.dm.intellij.bndtools.actions.EnterInBndFileHandler"/>
        <lang.elementManipulator forClass="de.dm.intellij.bndtools.psi.BndHeaderValuePart"
                                 implementationClass="de.dm.intellij.bndtools.psi.impl.BndHeaderValuePartManipulator"/>
        <lang.formatter language="bnd" implementationClass="de.dm.intellij.bndtools.formatting.BndFormattingModelBuilder"/>

        <!-- Completion Contribution for @Component annotation -->
        <completion.contributor order="first, before propertiesCompletion" language="JAVA" implementationClass="de.dm.intellij.liferay.language.osgi.ComponentPropertiesCompletionContributor"/>

        <!-- Inject properties language into @Component(property="") -->
        <!-- TODO experimental
        <multiHostInjector implementation="de.dm.intellij.liferay.language.osgi.ComponentPropertiesLanguageInjector"/>
        -->

        <!-- Provides a Line Marker for an Entity defined in service.xml. Using the Line Marker you can jump to the Model implementation -->
        <codeInsight.lineMarkerProvider language="XML" implementationClass="de.dm.intellij.liferay.language.service.LiferayServiceXMLLineMarkerProvider"/>

        <!-- Provides a Line Marker for a Service Model Implemenation class. Using the Line Marker you can jump to the declaration in service.xml. -->
        <codeInsight.lineMarkerProvider language="JAVA" implementationClass="de.dm.intellij.liferay.language.service.LiferayServiceJavaImplLineMarkerProvider"/>

        <!-- inspections -->
        <inspectionToolProvider implementation="de.dm.intellij.liferay.language.service.LiferayServiceXMLInspectionToolProvider"/>

        <!-- Error Reporting in case of crashes -->
        <errorHandler implementation="de.dm.intellij.liferay.util.PluginErrorReporter"/>

        <!-- Liferay Source Code library Type -->
        <!-- TODO development in progress..
        <library.type implementation="de.dm.intellij.liferay.library.LiferayLibraryType"/>
        -->
        <lang.documentationProvider language="JAVA" implementationClass="de.dm.intellij.liferay.language.osgi.ComponentPropertiesDocumentationProvider"/>

        <implicitUsageProvider order="last" implementation="de.dm.intellij.liferay.language.osgi.LiferayOsgiImplicitUsageProvider" />

        <!-- FileBasedIndexer to quickly find all portlet names -->
        <fileBasedIndex implementation="de.dm.intellij.liferay.index.PortletNameIndex" />

        <!-- FileBasedIndexer to quickly find all action commands names -->
        <fileBasedIndex implementation="de.dm.intellij.liferay.index.ActionCommandIndex" />

        <!-- FileBasedIndexer to quickly find all render commands names -->
        <fileBasedIndex implementation="de.dm.intellij.liferay.index.RenderCommandIndex" />

        <!-- FileBasedIndexer to quickly find all resource commands names -->
        <fileBasedIndex implementation="de.dm.intellij.liferay.index.ResourceCommandIndex" />

        <!-- File Based Index for finding the portlet name for JSPs -->
        <fileBasedIndex implementation="de.dm.intellij.liferay.index.PortletJspIndex" />

        <!-- inspections -->
        <inspectionToolProvider implementation="de.dm.intellij.liferay.language.osgi.ComponentInspectionToolProvider"/>
        <inspectionToolProvider implementation="de.dm.intellij.liferay.language.java.LiferayJavaInspectionToolProvider"/>

        <pluginReplacement implementation="de.dm.intellij.LiferayPluginReplacement" />

        <configurationType implementation="de.dm.intellij.liferay.language.groovy.LiferayServerGroovyConfigurationType"/>
        <programRunner implementation="de.dm.intellij.liferay.language.groovy.LiferayServerGroovyProgramRunner"/>
        <runConfigurationProducer implementation="de.dm.intellij.liferay.language.groovy.LiferayServerGroovyConfigurationProducer" />
        <runLineMarkerContributor language="Groovy" implementationClass="de.dm.intellij.liferay.language.groovy.LiferayServerGroovyRunLineMarkerProvider" />

        <psi.referenceContributor implementation="de.dm.intellij.liferay.workflow.LiferayWorkflowXmlReferenceContributor"
                                  language="XML"/>

        <psi.referenceContributor implementation="de.dm.intellij.liferay.language.osgi.MetaConfigurationReferenceContributor"
                                  language="JAVA"/>

        <lang.findUsagesProvider language="JAVA" implementationClass="de.dm.intellij.liferay.language.osgi.MetaConfigurationFindUsagesProvider" />
        <referencesSearch implementation="de.dm.intellij.liferay.language.osgi.MetaConfigurationReferencesSearch" />
        <usageTargetProvider implementation="de.dm.intellij.liferay.language.osgi.MetaConfigurationUsageTargetProvider" />
        <renamePsiElementProcessor implementation="de.dm.intellij.liferay.language.osgi.RenameMetaConfigurationProcessor" />
        <renameHandler implementation="de.dm.intellij.liferay.language.osgi.MetaConfigurationRenameHandler"/>
        <renameInputValidator implementation="de.dm.intellij.liferay.language.osgi.MetaConfigurationRenameInputValidator" />
        <elementDescriptionProvider implementation="de.dm.intellij.liferay.language.osgi.MetaConfigurationElementDescriptionProvider" />

        <!-- POSHI -->
        <fileType
                name="Poshi File"
                implementationClass="de.dm.intellij.liferay.language.poshi.PoshiFileType"
                fieldName="INSTANCE"
                language="Poshi"
                extensions="testcase;function;macro"
        />

        <fileType
                name="Poshi Path File"
                implementationClass="de.dm.intellij.liferay.language.poshi.PoshiPathFileType"
                fieldName="INSTANCE"
                language="HTML"
                extensions="path"
        />

        <lang.parserDefinition
            language="Poshi"
            implementationClass="de.dm.intellij.liferay.language.poshi.parser.PoshiParserDefinition"
        />

        <lang.syntaxHighlighterFactory
            language="Poshi"
            implementationClass="de.dm.intellij.liferay.language.poshi.highlighting.PoshiSyntaxHighlighterFactory"
        />

        <lang.braceMatcher
            language="Poshi"
            implementationClass="de.dm.intellij.liferay.language.poshi.highlighting.PoshiBraceMatcher"
        />

        <lang.commenter
            language="Poshi"
            implementationClass="de.dm.intellij.liferay.language.poshi.commenter.PoshiCommenter"
        />

        <completion.contributor
            language="Poshi"
            implementationClass="de.dm.intellij.liferay.language.poshi.completion.PoshiCompletionContributor"
        />

        <lang.formatter
            language="Poshi"
            implementationClass="de.dm.intellij.liferay.language.poshi.formatting.PoshiFormattingModelBuilder"
        />

        <configurationType
            implementation="de.dm.intellij.liferay.language.poshi.runner.PoshiTestcaseConfigurationType"
        />

        <programRunner
            implementation="de.dm.intellij.liferay.language.poshi.runner.PoshiTestcaseRunner"
        />

        <runConfigurationProducer
            implementation="de.dm.intellij.liferay.language.poshi.runner.PoshiTestcaseConfigurationProducer"
        />

        <runLineMarkerContributor
            language="Poshi"
            implementationClass="de.dm.intellij.liferay.language.poshi.runner.PoshiTestcaseRunLineMarkerContributor"
        />
        
        <internalFileTemplate
            name="Poshi Path File"
        />

        <internalFileTemplate
            name="Poshi Function"
        />

        <internalFileTemplate
            name="Poshi Macro"
        />

        <internalFileTemplate
            name="Poshi Testcase"
        />

        <externalAnnotator
                language="Poshi"
                implementationClass="de.dm.intellij.liferay.language.poshi.annotation.PoshiExternalAnnotator"
        />
        <externalAnnotator
                language="HTML"
                implementationClass="de.dm.intellij.liferay.language.poshi.annotation.PoshiExternalAnnotator"
        />

        <externalAnnotator
                language="XML"
                implementationClass="de.dm.intellij.liferay.maven.LiferayMavenDeprecationsExternalAnnotator"
        />
    </extensions>

    <extensions defaultExtensionNs="org.jetbrains.idea.maven">
        <!-- A Maven Importer which tries to find out the target Liferay Version and Parent Theme (Liferay 6.x) based on the pom.xml within your project -->
        <importer implementation="de.dm.intellij.liferay.maven.importer.LiferayVersionMavenImporter" />

        <!-- A Maven Importer which tries to find out the Parent Theme in Liferay 7.x projects based on the pom.xml within your project -->
        <importer implementation="de.dm.intellij.liferay.maven.importer.LiferayThemeBuilderMavenImporter" />

        <!-- A Maven Importer which resolves the Liferay Home directory if the bundle-support plugin is present and will "exclude" the bundles folder from indexing in IntelliJ IDEA -->
        <importer implementation="de.dm.intellij.liferay.maven.importer.LiferayBundleSupportMavenImporter" />
    </extensions>

    <extensions defaultExtensionNs="org.jetbrains.plugins.gradle">
        <!-- Extract parent Theme information from a gradle based project (based on the com.liferay.gradle.plugins.theme.builder configuration) -->
        <!-- TODO not working for projects using Java below 17 ? -->
        <!--
        <projectResolve implementation="de.dm.intellij.liferay.gradle.LiferayThemeBuilderGradleProjectResolver" />
        -->

        <!-- A gradle project resolver which resolves the Liferay Home directory if the bundle-support plugin is present and will "exclude" the bundles folder from indexing in IntelliJ IDEA -->
        <!-- TODO not working for projects using Java below 17 ? -->
        <!--
        <projectResolve implementation="de.dm.intellij.liferay.gradle.LiferayBundleSupportGradleProjectResolver" />
        -->
    </extensions>

    <projectListeners>
        <listener class="de.dm.intellij.liferay.module.LiferayModuleListener" topic="com.intellij.openapi.project.ModuleListener" />
        <listener class="de.dm.intellij.liferay.resourcesimporter.LiferayAdvancedResourcesImporterServiceCallModuleListener" topic="com.intellij.openapi.project.ModuleListener" />
    </projectListeners>
    <applicationListeners>
        <listener class="de.dm.intellij.liferay.theme.LiferayPackageJSONParser" topic="com.intellij.openapi.vfs.newvfs.BulkFileListener" />
        <listener class="de.dm.intellij.liferay.theme.LiferayLookAndFeelXmlParser" topic="com.intellij.openapi.vfs.newvfs.BulkFileListener" />
        <listener class="de.dm.intellij.liferay.hook.LiferayHookXmlParser" topic="com.intellij.openapi.vfs.newvfs.BulkFileListener" />
        <listener class="de.dm.intellij.liferay.bnd.OsgiBndFileParser" topic="com.intellij.openapi.vfs.newvfs.BulkFileListener" />
        <listener class="de.dm.intellij.liferay.language.jsp.LiferayJspWebContentRootListener" topic="com.intellij.openapi.vfs.newvfs.BulkFileListener" />
        <listener class="de.dm.intellij.liferay.resourcesimporter.LiferayPluginPackagePropertiesParser" topic="com.intellij.openapi.vfs.newvfs.BulkFileListener" />
        <listener class="de.dm.intellij.liferay.resourcesimporter.LiferayAdvancedResourcesImporterBndParser" topic="com.intellij.openapi.vfs.newvfs.BulkFileListener" />
        <listener class="de.dm.intellij.liferay.resourcesimporter.LiferayAdvancedResourcesImporterServiceCallWatcher" topic="com.intellij.openapi.vfs.newvfs.BulkFileListener" />
    </applicationListeners>

    <actions>
        <!-- POSHI -->

        <action id="NewPoshiScriptFile" class="de.dm.intellij.liferay.language.poshi.actions.CreatePoshiScriptFileAction">
            <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFromTemplate"/>
        </action>
    </actions>
</idea-plugin>
