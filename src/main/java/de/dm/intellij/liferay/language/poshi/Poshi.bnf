//Poshi Script documentation: https://github.com/yichenroy/com-liferay-poshi-runner/blob/master/poshi-script.markdown
//Poshi testcases: https://github.com/liferay/liferay-portal/blob/master/modules/test/poshi/poshi-core/src/test/resources/com/liferay/poshi/core/dependencies/elements/PoshiSyntax.testcase
{
   parserClass="de.dm.intellij.liferay.language.poshi.parser.PoshiParser"
   parserUtilClass="de.dm.intellij.liferay.language.poshi.parser.PoshiParserUtil"

   extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

   psiClassPrefix="Poshi"
   psiImplClassSuffix="Impl"
   psiPackage="de.dm.intellij.liferay.language.poshi.psi"
   psiImplPackage="de.dm.intellij.liferay.language.poshi.psi.impl"

   elementTypeHolderClass="de.dm.intellij.liferay.language.poshi.psi.PoshiTypes"
   elementTypeClass="de.dm.intellij.liferay.language.poshi.psi.PoshiElementType"
   tokenTypeClass="de.dm.intellij.liferay.language.poshi.psi.PoshiTokenType"

   psiImplUtilClass="de.dm.intellij.liferay.language.poshi.psi.impl.PoshiPsiImplUtil"

   tokens = [
           //keywords
           DEFINITION = "definition"
           SET_UP = "setUp"
           TEAR_DOWN = "tearDown"
           FUNCTION = "function"
           MACRO = "macro"
           PROPERTY = "property"
           STATIC = "static"
           VAR = "var"
           IF = "if"
           ELSE_IF = "else if"
           ELSE = "else"
           TASK = "task"
           WHILE = "while"
           RETURN = "return"
           FOR = "for"
           LIST = "list"

           DOUBLE_AMPERSAND = "&&"
           DOUBLE_BAR = "||"

           CURLY_LBRACE = "{"
           CURLY_RBRACE = "}"
           ROUND_LBRACE = "("
           ROUND_RBRACE = ")"
           SQUARE_LBRACE = "["
           SQUARE_RBRACE = "]"
           PERIOD = "."
           COMMA = ","
           EQUALS = "="
           COLON = ":"
           SEMICOLON = ";"
           DOLLAR = "$"

           LINE_COMMENT = "regexp://.*"
           BLOCK_COMMENT = "regexp:/\*([^*]|\*+[^*/])*(\*+/)?"

           DOUBLE_QUOTED_STRING = "regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"

           SINGLE_QUOTED_MULTILINE = "regexp:'''[\"\$\(\{\)\}\[\]\:\,\.\-\_\/\\\@\;\?\<\>\=\s\w\d]*'''"

           SINGLE_QUOTED_STRING = "regexp:'.*'"

           ANNOTATION_NAME = "regexp:(@[\s]*[a-z0-9-]+)"
           IDENTIFIER = "regexp:([A-z][\w-]*)+"

           ARITHMETIC_OPERATOR = "regexp:(\-|\+|\*/)"
           NUMERIC_CONSTANT = "regexp:[0-9]+"

           COMPARISION_OPERATOR = "regexp:(\!=|==|\!)"

           TESTING_WHITESPACE = "regexp:[ \n\t\r\f]+"
   ]

   implements("function-definition|macro-definition|test-definition|variable-assignment")=[
    "com.intellij.psi.PsiNamedElement"
   ]

   extends(".*-definition") = definition-base
}

// Root

poshi-file ::= definition-block | comments

definition-block ::= [annotation*] DEFINITION [CURLY_LBRACE {structure-block | command-block | property-instruction | variable | comments}* CURLY_RBRACE]

structure-block ::= (SET_UP | TEAR_DOWN) [CURLY_LBRACE {structure-inner}* CURLY_RBRACE]

command-block ::= [annotation*] definition-base [CURLY_LBRACE {command-inner}* CURLY_RBRACE]

private structure-inner ::= invocation | property-instruction | variable | control-block | comments | for-loop

private command-inner ::= structure-inner | return-statement

definition-base ::= function-definition | macro-definition | test-definition {
    methods=[getName setName]
}

function-definition ::= FUNCTION IDENTIFIER

macro-definition ::= MACRO IDENTIFIER

test-definition ::= 'test' IDENTIFIER

method-call ::= IDENTIFIER {PERIOD IDENTIFIER}* {
    methods=[getReferences]
}

invocation ::= method-call [ROUND_LBRACE [invocation-inner-list] ROUND_RBRACE] [SEMICOLON]

private invocation-inner-list ::= invocation-inner {COMMA invocation-inner}*

private invocation-inner ::= variable-assignment | IDENTIFIER | strings | variable-ref {ARITHMETIC_OPERATOR invocation-inner}*

variable-assignment ::= IDENTIFIER EQUALS variable-assignment-inner {ARITHMETIC_OPERATOR variable-assignment-inner}* {
    methods=[getName setName]
}

private variable-assignment-inner ::= (strings | invocation | NUMERIC_CONSTANT | variable-ref)

variable-ref ::= DOLLAR CURLY_LBRACE IDENTIFIER CURLY_RBRACE {
    methods=[getReferences]
}

return-statement ::= RETURN {strings}* [SEMICOLON]

private strings ::= string-quoted-double | string-quoted-single-multiline | string-quoted-single

string-quoted-double ::= DOUBLE_QUOTED_STRING {
    methods=[getReferences]
}

string-quoted-single-multiline ::= SINGLE_QUOTED_MULTILINE

string-quoted-single ::= SINGLE_QUOTED_STRING

annotation ::= ANNOTATION_NAME [EQUALS (string-quoted-double | NUMERIC_CONSTANT)] {
    methods=[getName getValue]
}

property-instruction ::= PROPERTY IDENTIFIER {PERIOD IDENTIFIER}* EQUALS (string-quoted-double | string-quoted-single-multiline) [SEMICOLON]

variable ::= [STATIC] VAR variable-assignment [SEMICOLON]

control-block ::= (control-block-with-condition | control-block-without-condition) CURLY_LBRACE {command-inner}* CURLY_RBRACE

private control-block-with-condition ::= (IF | ELSE_IF | TASK | WHILE) ROUND_LBRACE control-block-inner* ROUND_RBRACE

private control-block-without-condition ::= (ELSE)

private control-block-inner ::= invocation | string-quoted-double | variable-assignment | variable-ref | COMPARISION_OPERATOR | ROUND_LBRACE control-block-inner* ROUND_RBRACE | (DOUBLE_AMPERSAND | DOUBLE_BAR) control-block-inner

comments ::= comment-block | LINE_COMMENT

comment-block ::= BLOCK_COMMENT

for-loop ::= FOR ROUND_LBRACE VAR IDENTIFIER COLON LIST (strings | variable-ref) ROUND_RBRACE CURLY_LBRACE {command-inner}* CURLY_RBRACE
