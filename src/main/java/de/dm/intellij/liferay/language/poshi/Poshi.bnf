{
   parserClass="de.dm.intellij.liferay.language.poshi.parser.PoshiParser"
   parserUtilClass="de.dm.intellij.liferay.language.poshi.parser.PoshiParserUtil"

   extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

   psiClassPrefix="Poshi"
   psiImplClassSuffix="Impl"
   psiPackage="de.dm.intellij.liferay.language.poshi.psi"
   psiImplPackage="de.dm.intellij.liferay.language.poshi.psi.impl"

   elementTypeHolderClass="de.dm.intellij.liferay.language.poshi.psi.PoshiTypes"
   elementTypeClass="de.dm.intellij.liferay.language.poshi.psi.PoshiElementType"
   tokenTypeClass="de.dm.intellij.liferay.language.poshi.psi.PoshiTokenType"

   psiImplUtilClass="de.dm.intellij.liferay.language.poshi.psi.impl.PoshiPsiImplUtil"

   tokens = [
           //keywords
           DEFINITION = "definition"
           SET_UP = "setUp"
           TEAR_DOWN = "tearDown"
           FUNCTION = "function"
           MACRO = "macro"
           TEST = "test"
           PROPERTY = "property"
           STATIC = "static"
           VAR = "var"
           IF = "if"
           ELSE_IF = "else if"
           ELSE = "else"
           TASK = "task"
           WHILE = "while"
           RETURN = "return"

           CURLY_LBRACE = "{"
           CURLY_RBRACE = "}"
           ROUND_LBRACE = "("
           ROUND_RBRACE = ")"
           SQUARE_LBRACE = "["
           SQUARE_RBRACE = "]"
           PERIOD = "."
           COMMA = ","
           EQUALS = "="
           SEMICOLON = ";"

           LINE_COMMENT = "regexp://.*"
           BLOCK_COMMENT = "regexp:/\*([^*]|\*+[^*/])*(\*+/)?"

           DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
           SINGLE_QUOTED_STRING = "regexp:('.*?')"
           ANNOTATION_NAME = "regexp:(@[\s]*[a-z0-9]+)"
           IDENTIFIER = "regexp:([A-z][\w-]*)+"

           ARITHMETIC_OPERATOR = "regexp:(\-|\+|\*/)"
           NUMERIC_CONSTANT = "regexp:[0-9]+"

           COMPARISION_OPERATOR = "regexp:[!=]="

           TESTING_WHITESPACE = "regexp:[ \n\t\r\f]+"
   ]

   implements("command-block|variable-assignment")=[
    "com.intellij.psi.PsiNamedElement"
   ]
}

// Root

poshi-file ::= definition-block | comments

definition-block ::= [annotation*] DEFINITION [CURLY_LBRACE {structure-block | command-block | property-instruction | variable | comments}* CURLY_RBRACE]

structure-block ::= (SET_UP | TEAR_DOWN) [CURLY_LBRACE [invocation*] CURLY_RBRACE]

command-block ::= [annotation*] (FUNCTION | MACRO | TEST) IDENTIFIER [CURLY_LBRACE {invocation | property-instruction | variable | control-block | comments}* CURLY_RBRACE] {
    methods=[getName setName]
}

invocation ::= IDENTIFIER [PERIOD IDENTIFIER] [ROUND_LBRACE [invocation-inner-list] ROUND_RBRACE] [SEMICOLON]

private invocation-inner-list ::= invocation-inner [COMMA invocation-inner]

private invocation-inner ::= variable-assignment | IDENTIFIER | string-quoted-double

variable-assignment ::= IDENTIFIER EQUALS variable-assignment-inner {ARITHMETIC_OPERATOR variable-assignment-inner}* {
    methods=[getName setName]
}

private variable-assignment-inner ::= (string-quoted-double | invocation | NUMERIC_CONSTANT)

string-quoted-double ::= DOUBLE_QUOTED_STRING

annotation ::= ANNOTATION_NAME [EQUALS string-quoted-double]

property-instruction ::= PROPERTY IDENTIFIER {PERIOD IDENTIFIER}* EQUALS (string-quoted-double) [SEMICOLON]

variable ::= [STATIC] VAR variable-assignment [SEMICOLON]

control-block ::= (control-block-with-condition | control-block-without-condition) CURLY_LBRACE {invocation | property-instruction | variable | control-block | comments}* CURLY_RBRACE

private control-block-with-condition ::= (IF | ELSE_IF | TASK | WHILE) ROUND_LBRACE control-block-inner* ROUND_RBRACE

private control-block-without-condition ::= (ELSE)

private control-block-inner ::= invocation | string-quoted-double | variable-assignment | COMPARISION_OPERATOR

comments ::= comment-block | LINE_COMMENT

comment-block ::= BLOCK_COMMENT

//TODO: arithmetic operators
//TODO: for loops
//TODO: escaped strings with '''
